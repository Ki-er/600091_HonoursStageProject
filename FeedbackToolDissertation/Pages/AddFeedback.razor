@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@inject ModuleService ModuleService
@inject FeedbackService FeedbackService


@page "/AddFeedback"
<h3>Add Feedback</h3>
    <label> Module</label>
    <select id="module" name="module">
        @if (moduleList == null)
        {
            <p><em>Loading....</em></p>
        }
        else
        {
            @foreach (var module in moduleList)
            {
                <option value="@module.ModuleName">@module.ModuleName</option>
            }

        }
    </select>





@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]

    Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Modules> moduleList;
    List<Feedback> feedbackList;

    protected
    override
    async Task OnInitializedAsync()
    {

        // Get the current user
        var user = (await authenticationStateTask).User;
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        feedbackList = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);

    }
  }
