@using Blazored.Modal
@using Blazored.Modal.Services
@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation

@inject ModuleService ModuleService
@inject ACWService ACWService
@inject CriteriaService CriteriaService
@inject SectionService SectionService
@inject FeedbackService FeedbackService

@page "/Grading"

<h3>Grading</h3>

<div class="fileinsert"
<InputFile OnChange="@LoadFiles" />
</div>
<br />
<form method="post">
    <label> Student </label>
    <input type="text" id="snumber" placeholder="Student Number" name="snumber">
    <br />
    <label> Module</label>

    <select @onchange="@OnSelectModule">
        @if (moduleList == null)
        {
            <p><em>Loading....</em></p>
            selectedModule = "No Module Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Module</option>
            @foreach (var module in moduleList)
            {
                <option value = "@module.ModuleName">@module.ModuleName</option>
            }
  

        }
    </select>
    <button type="button" class="btn btn-primary"@onclick="AddNewModule">+</button>

     @if(ShowPopUpModule)
    {
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Add new module</h3>
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control" type="text"
                                placeholder="Module Name"
                               @bind="inputModules.ModuleName" />
                                <br />
                                <button type="button" class="btn btn-success" @onclick="SaveModule"> Save </button>;
                             </div>
                        </div>
                    </div>
                </div> 
}


    @*ACW Dropdown Box*@
    <br />
    <label> ACW</label>
    <select @onchange="@OnSelectACW" autocomplete="off">
         
        @if (acw == null)
        {
            <p><em>Loading....</em></p>
            selectedACW = "zzz";
        }
        else
        {
            <option value="" selected="selected" autocomplete="off">Select your ACW</option>
            @foreach (var acwrecord in acw)
            {
                @if (acwrecord.ModuleName.Contains(selectedModule))
                {
                    <option value="@acwrecord.AcwName">@acwrecord.AcwName</option>
                    presentACW = true;
                }
                else if(presentACW == false)
                {
                    <option value="" selected hidden>Select your ACW</option>
                    selectedACW = "No ACW Chosen";
                }
            }
    }
    </select>
    <button type="button" class="btn btn-primary"@onclick="AddNewACW">+</button>

    @if (ShowPopUpACW)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new ACW</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        <h8>Insert ACW</h8>
                        <input class="form-control" type="text"placeholder="ACW Name"@bind="inputACW.AcwName" />
                        <br />
                        <h8>Insert Section</h8>
                        <input class="form-control" type="text"placeholder="Section Name"@bind="inputSections.SectionName" />
                        <br />
                        <h8>Insert Criteria</h8>
                        <input class="form-control" type="text"placeholder="Criteria Name"@bind="inputCriteria.Criteria1" />
                        <br />
                        <button type="button" class="btn btn-success" @onclick="SaveACW"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }


    <br />
    <br />
     
    <h8> Feedback </h8>
    @*Section 1*@
    <br />
    Section @i
    <br />
    <select id="section1" name="section1" @onchange="@OnSelectSection">
        @if (sections == null)
        {
            <p><em>Loading....</em></p>
            selectedSection1 = "No Section Chosen";

        }
        else
        {
            <option value="" selected hidden>Select your Sections</option>
            @foreach (var sectionrecord in sections)
            {
                @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                    presentSection = true;
                }
                else if(presentSection == false)
                {
                    <option value="" selected hidden>Select your Section</option>
                    selectedSection1 = "No Section Chosen";
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Criteria*@
    <select id="criteria" name="criteria" @onchange = "@OnSelectCriteria">
        @if (criteria == null)
        {
            <p><em>Loading....</em></p>
            selectedCriteria1 = "No Criteria Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteriarecord.SectionName.Contains(selectedSection1) && (criteriarecord.ModuleName.Contains(selectedModule)))
                {
                   <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                   presentCriteria = true;
                }
                else if(presentCriteria == false)
                {
                    <option value="" selected hidden>Select your Criteria</option>
                    selectedCriteria1 = "No Criteria Chosen";
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Feedback*@
    <select id="feedback" name="feedback">
        @if (feedback == null)
        {
            <p><em>Loading....</em></p>
        }
        else
        {            
            <option value=""  selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedbackrecord.Criteria.Contains(selectedCriteria1) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                {
                   <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1</option>
                }
                else if(presentFeedback == false)
                {
                    <option value="" selected hidden>Select your Feedback</option>
                }
            }
        }
    </select>
    <button type="button" class="btn btn-primary"@onclick="AddNewFeedback">+</button>


    @if (showPopUpFeedback)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new Feedback</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        <label>Section:</label>
                        <label>@selectedSection1 </label>
                        <br />
                        <label>Criteria:</label>
                        <label>@selectedCriteria1 </label>
                        <br />
                        <h8>Insert Feedback</h8>
                        <input class="form-control" type="text"placeholder="Feedback"@bind="inputFeedback.Feedback1" />
                        <br />
                        <button type="button" class="btn btn-success" @onclick="SaveFeedback"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }

    <br />
    <br />

  
    <button type="button" class="btn btn-primary"@onclick="AddNewFeedback">+</button>


    @if (showPopUpFeedback)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new Feedback</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        <label>Section:</label>
                        <label>@selectedSection1 </label>
                        <br />
                        <label>Criteria:</label>
                        <label>@selectedCriteria1 </label>
                        <br />
                        <h8>Insert Feedback</h8>
                        <input class="form-control" type="text"placeholder="Feedback"@bind="inputFeedback.Feedback1" />
                        <br />
                        <button type="button" class="btn btn-success" @onclick="SaveFeedback"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }

    <br />
    <br />

    <button type="submit" class="btn btn-primary">Export</button>
</form>


@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]

    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string UserIdentityName = "";

    List<Modules> moduleList;
    List<Feedback> feedback;
    List<Criteria> criteria;
    List<Sections> sections;
    List<Acw> acw;

    string selectedModule;
    string selectedACW;
    string selectedSection1;
    string selectedCriteria1;

    bool presentModule;
    bool presentACW;
    bool presentSection;
    bool presentCriteria;
    bool presentFeedback;

    int i = 0;



    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }        
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
        sections = await SectionService.GetSectionsAsync(user.Identity.Name);
        acw = await ACWService.GetAcwsAsync(user.Identity.Name);
    }


    private void LoadFiles(InputFileChangeEventArgs e)
    {

    }

    public void OnSelectModule(ChangeEventArgs e)
    {
        selectedModule = e.Value.ToString();

    }

    public void OnSelectACW(ChangeEventArgs e)
    {
        selectedACW = e.Value.ToString();
    }

    public void OnSelectSection(ChangeEventArgs e)
    {
        selectedSection1 = e.Value.ToString();
    }

    public void OnSelectCriteria(ChangeEventArgs e)
    {

        selectedCriteria1 = e.Value.ToString();
    }




    bool ShowPopUpModule = false;
    bool ShowPopUpACW = false;
    bool showPopUpFeedback = false;

    Modules inputModules = new Modules();
    Acw inputACW = new Acw();
    Sections inputSections = new Sections();
    Criteria inputCriteria = new Criteria();
    Feedback inputFeedback = new Feedback();

    void ClosePopup()
    {
        // Close the Popup
        ShowPopUpModule = false;
        ShowPopUpACW = false;
        showPopUpFeedback = false;
    }

    void AddNewModule()
    {
        inputModules = new Modules();
        inputModules.Id = 0;
        ShowPopUpModule = true;
    }

    void AddNewACW()
    {
        inputACW = new Acw();
        inputSections = new Sections();
        inputCriteria = new Criteria();

        inputACW.Id = 0;
        ShowPopUpACW = true;
    }

    void AddNewFeedback()
    {
        inputFeedback = new Feedback();
        inputACW.Id = 0;
        showPopUpFeedback = true;
    }

    async Task SaveModule()
    {
        // Close the Popup
        ShowPopUpModule = false;
        if (inputModules.Id == 0)
        {
            Modules NewModule = new Modules();
            NewModule.ModuleName = inputModules.ModuleName;
            NewModule.UserName = UserIdentityName;
            var result = ModuleService.CreateModulesAsync(NewModule);
            return;
        }
    }



    async Task SaveACW()
    {

             // Close the Popup
            ShowPopUpACW = false;
            if (inputACW.Id == 0)
            {
                Acw newACW = new Acw();
                newACW.ModuleName = selectedModule;
                newACW.AcwName = inputACW.AcwName;
                newACW.UserName = UserIdentityName;
                var acwInsert = ACWService.CreateACWAsync(newACW);

                Sections newSection = new Sections();
                newSection.Id = 0;
                newSection.SectionName = inputSections.SectionName;
                newSection.ModuleName = selectedModule;
                newSection.Acwname = inputACW.AcwName;
                newSection.UserName = UserIdentityName;
                var sectionInsert = SectionService.CreateSectionsAsync(newSection);

                Criteria newCriteria = new Criteria();
                newCriteria.Id = 0;
                newCriteria.Criteria1 = inputCriteria.Criteria1;
                newCriteria.SectionName = inputSections.SectionName;
                newCriteria.Acwname = inputACW.AcwName;
                newCriteria.ModuleName = selectedModule;
                newCriteria.UserName = UserIdentityName;
                var criteriaInsert = CriteriaService.CreateCriteriaAsync(newCriteria);
                return;
      
       
        }
    }

    async Task SaveFeedback()
    {
        // Close the Popup
        showPopUpFeedback = false;
        if (inputFeedback.Id == 0)
        {
            Feedback newFeedback = new Feedback();
            newFeedback.Feedback1 = inputFeedback.Feedback1;
            newFeedback.ModuleName = selectedModule;
            newFeedback.Acwname = selectedACW;
            newFeedback.SectionName = selectedSection1;
            newFeedback.Criteria = selectedCriteria1;
            newFeedback.UserName = UserIdentityName;
            var feedbackInsert = FeedbackService.CreateFeedbackAsync(newFeedback);
            return;

        }
    }


}
