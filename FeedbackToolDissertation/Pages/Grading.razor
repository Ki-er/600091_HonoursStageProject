@using Blazored.Modal
@using Blazored.Modal.Services
@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation

@inject ModuleService ModuleService
@inject ACWService ACWService
@inject CriteriaService CriteriaService
@inject SectionService SectionService
@inject FeedbackService FeedbackService

@page "/Grading"

<h3>Grading</h3>

<div class="fileinsert"
<InputFile OnChange="@LoadFiles" />
</div>
<br />

@*Post Form*@
<form method="post">
    @*Student input section*@
    <label> Student </label>
    <input type="text" id="snumber" placeholder="Student Number" name="snumber">
    <br />
    @*Select Module Section*@
    <select @onchange="@OnSelectModule">
        @*Used for when loading page so page does not crash from modulelist being null when the page first loads*@
        @if (moduleList == null)
        {
            <p><em>Loading....</em></p>
            selectedModule = "No Module Chosen";
        }
        @*Once the page has loaded, modulelist will not be null so this will be run everytime*@
        else
        {
            @*Select your module will always be at the top. Has been hidden so the user cannot select it*@
            <option value="" selected hidden>Select your Module</option>
            @*For every module in the database, it will be loaded into the selection box and will be displayed to the user*@
            @foreach (var module in moduleList)
            {
                @*Displayed the module name to the user*@
                <option value="@module.ModuleName">@module.ModuleName</option>
            }
        }
        @*End Module Select*@
    </select>
    @*Added module button next to the selection box. When this is clicked, the add module button will be run and ShowPopUpModule will be set as true*@
    <button type="button" class="btn btn-primary" @onclick="AddNewModule">+</button>

    @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
    @if (ShowPopUpModule)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new module</h3>
                        @*Close button on top right of modal*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        <input class="form-control" type="text" placeholder="Module Name" @bind="inputModules.ModuleName" />
                        <br />
                        @*When the user has entered a module, and presses save, the saveModule method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveModule"> Save </button>;
                        <br />
                        <br />
                        @*If there is something wrong with the form, error module will be true and the following code will run*@
                        @if (errorModule == true)
                        {
                            @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                            if (inputModules.ModuleName == null || inputModules.ModuleName == "")
                            {
                                <label class="alert-danger">No Module Entered</label>
                            }
                            @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                            else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
                            {
                                <label class="alert-danger">Module is already within Database</label>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    <br />


    @*ACW Dropdown Box*@
    <label> ACW </label>
    <select @onchange="@OnSelectACW" autocomplete="off">
        @*Used for when loading page so page does not crash from acw being null when the page first loads*@
        @if (acw == null)
        {
            <p><em>Loading....</em></p>
            selectedACW = "No ACW Chosen";
        }
        @*Once the page has loaded, acw will not be null so this will be run everytime*@
        else
        {
            @*Select your acw will always be at the top. Has been hidden so the user cannot select it*@
            <option value="" selected="selected" hidden>Select your ACW</option>
            @*For each acw within the acw table, the following codw will run*@
            @foreach (var acwrecord in acw)
            {
                @*If the records module name element has the selected module by the user, the  correct acws will load within the select*@
                @if (acwrecord.ModuleName.Contains(selectedModule))
                {
                    @*The acws that match the selectedmodule will load*@
                    <option value="@acwrecord.AcwName">@acwrecord.AcwName</option>
                    @*PresentACW will be set to true if there is an acw that matches the module selected by the user*@
                    presentACW = true;
                }
                @*If there are no acws that match the module, then the following code will run *@
                else if (presentACW == false)
                {
                    @*Select your acw will always be at the top. Has been hidden so the user cannot select it*@
                    <option value="" selected hidden>Select your ACW</option>
                    @*SelectedACW will be set as No Acw chosen so that data validation can occur and the variable is not left as null or "" *@
                    selectedACW = "No ACW Chosen";
                }
            }
        }
    </select>
    @*Add acw button next to the selection box. When this is clicked, the add module button will be run and ShowPopUpACW will be set as true*@
    <button type="button" class="btn btn-primary" @onclick="AddNewACW">+</button>


    @*When showPopUpACW is true, the following modal will display*@
    @if (ShowPopUpACW)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        @*Modal title *@
                        <h3 class="modal-title">Add new ACW</h3>
                        @*Button that closes the modal and resets any error messages displayed*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        @*Displays selectedModule variable*@
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        @*Insert ACW for the selected module*@
                        <h8>Insert ACW</h8>
                        <input class="form-control" type="text" placeholder="ACW Name" @bind="inputACW.AcwName" />
                        <br />
                        @*Insert section for the inputted acw*@
                        <h8>Insert Section</h8>
                        <input class="form-control" type="text" placeholder="Section Name" @bind="inputSections.SectionName" />
                        <br />
                        @*Insert criteria for the inputted section*@
                        <h8>Insert Criteria</h8>
                        <input class="form-control" type="text" placeholder="Criteria Name" @bind="inputCriteria.Criteria1" />
                        <br />
                        @*When the user has entered the appropiate details, and presses save, the saveACW method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveACW"> Save </button>
                        <br />
                        <br />
                        @*If errorModule is true, they will be warned that no module has been chosen*@
                        @if (errorModule)
                        {
                            <label class="alert-warning">No Module Chosen</label>
                            <br />
                            <br />
                        }
                        @*If erorrACW is true then the following code will run, independantly of the selection statements around it*@
                        @if (errorAcw)
                        {
                            <label class="alert-warning">No Acw Entered</label>
                            <br />
                            <br />
                        }
                        @*If errorSections is true, then the following code will run independantly of the selection statements around it*@
                        @if (errorSections)
                        {
                            <label class="alert-warning">No Section Entered</label>
                            <br />
                            <br />
                        }
                        @*If errorCriteria is true, then the following code will run, independantly of the selection statements around it*@
                        @if (errorCriteria)
                        {
                            <label class="alert-warning">No Criteria Entered</label>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <br />


    @*Seperates feedback section to module section*@
    <h8> Feedback </h8>
    <br />
    @*Section 1*@
    Section 1
    <br />
    <select id="section1" name="section1" @onchange="@OnSelectSection">
        @*Used for when loading page so page does not crash from sections being null when the page first loads*@
        @if (sections == null)
        {
            <p><em>Loading....</em></p>
            selectedSection1 = "No Section Chosen";

        }
        @*Once the page has loaded, sections will not be null so this will be run everytime*@
        else
        {
            @*Select your section will always be at the top. Has been hidden so the user cannot select it*@
            <option value="" selected hidden>Select your Sections</option>
            @*For each section within the sections table, the following code will run*@
            @foreach (var sectionrecord in sections)
            {
                @*If the section has a selectedACW and selectedModule then the following code will run*@
                @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                {
                    @*The sections that match the acw and module will be loaded within the select*@
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                    @*If there is sections present, presentSections will be set as true*@
                    presentSection = true;
                }
                @*If there is no sections present, the following code will run*@
                else if (presentSection == false)
                {
                    @*If there is no sections present then select your section will be at the top. Has been hidden so the user cannot select it *@
                    <option value="" selected hidden>Select your Section</option>
                    selectedSection1 = "No Section Chosen";
                }
            }
        }
        }
    </select>
    <br />
    <br />

    @*Criteria dropdown box*@
    <select id="criteria" name="criteria" @onchange="@OnSelectCriteria">
        @*Used for when loading page so page does not crash from criteria being null when the page first loads*@
        @if (criteria == null)
        {
            <p><em>Loading....</em></p>
            selectedCriteria1 = "No Criteria Chosen";
        }
        @*Once the page has loaded, criteria will not be null so this will be run everytime*@
        else
        {
            @*Select your criteria will always be at the top. Has been hidden so the user cannot select it*@
            <option value="" selected hidden>Select your Criteria</option>
            @*For each criteria within the criteria table, the following code will run*@
            @foreach (var criteriarecord in criteria)
            {
                @*If the section has a selectedSection1 and selectedModule then the following code will run*@
                @if (criteriarecord.SectionName.Contains(selectedSection1) && (criteriarecord.ModuleName.Contains(selectedModule)))
                {
                    @*The criteria macthing the section and module will be displayed to the user*@
                    <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                    @*presentCriteria will be set to true if there is criteria*@
                    presentCriteria = true;
                }
                @*If there is no criteria within the database matching the section and module, the following code will run*@
                else if (presentCriteria == false)
                {
                    <option value="" selected hidden>Select your Criteria</option>
                    selectedCriteria1 = "No Criteria Chosen";
                }
            }
        }
    </select>
    <br />
    <br />

    @*Feedback Dropdown Box*@
    <select id="feedback" name="feedback">
        @*Used for when loading page so page does not crash from criteria being null when the page first loads*@
        @if (feedback == null)
        {
            <p><em>Loading....</em></p>
            selectedFeedback1 = "No Feedback Chosen";
        }
        @*Once the page has loaded, criteria will not be null so this will be run everytime*@
        else
        {
            @*Select your feedback will always be at the top. Has been hidden so the user cannot select it*@
            <option value="" selected hidden>Select your Feedback</option>
            @*For each feedback within the feedback table, the following code will run*@
            @foreach (var feedbackrecord in feedback)
            {
                @*If the section has a selectedCriteria and selectedModule then the following code will run*@
                @if (feedbackrecord.Criteria.Contains(selectedCriteria1) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                {
                    @*The feedback macthing the criteria and module will be displayed to the user*@
                    <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1</option>
                    @*presentFeedback will be set to true if there is criteria*@
                    presentFeedback = true;
                }
                 @*If there is no feedback within the database matching the section and module, the following code will run*@
                else if (presentFeedback == false)
                {
                    <option value="" selected hidden>Select your Feedback</option>
                }
            }
        }
    </select>
    @*Add feedback button next to the selection box. When this is clicked, the addNewFeedback button will be run and showPopUpFeedback will be set as true*@
    <button type="button" class="btn btn-primary" @onclick="AddNewFeedback">+</button>


    @if (showPopUpFeedback)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new Feedback</h3>
                        @*Button that closes the modal and resets any error messages displayed*@
                        <button type="button" class="close"@onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        @*Displays selected module*@
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        @*Displays selected acw*@
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        @*Displays selected section*@
                        <label>Section:</label>
                        <label>@selectedSection1 </label>
                        <br />
                        @*Displays selected criteria*@
                        <label>Criteria:</label>
                        <label>@selectedCriteria1 </label>
                        <br />
                        @*Input box to allow for adding feedback*@
                        <h8>Insert Feedback</h8>
                        <input class="form-control" type="text" placeholder="Feedback" @bind="inputFeedback.Feedback1" />
                        <br />
                        @*When the user has entered the appropiate details, and presses save, the saveFeedback method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveFeedback"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <br />
   
    <button type="submit" class="btn btn-primary">Export</button>
</form>


@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]

    // Gets the user who is logged in
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string UserIdentityName = "";

    // Creates the lists pulled from the database tables
    List<Modules> moduleList;
    List<Feedback> feedback;
    List<Criteria> criteria;
    List<Sections> sections;
    List<Acw> acw;

    // The variables that will be edited when the user interactes with the dropdown boxes
    string selectedModule;
    string selectedACW;
    string selectedSection1;
    string selectedCriteria1;
    string selectedFeedback1;

    // The variables that prevent overwriting of the selected variables
    bool presentModule;
    bool presentACW;
    bool presentSection;
    bool presentCriteria;
    bool presentFeedback;

    // The variables used for when displaying the modals
    bool ShowPopUpModule = false;
    bool ShowPopUpACW = false;
    bool showPopUpFeedback = false;

    // The variables that allow for new data to be added to the databases
    Modules inputModules = new Modules();
    Acw inputACW = new Acw();
    Sections inputSections = new Sections();
    Criteria inputCriteria = new Criteria();
    Feedback inputFeedback = new Feedback();

    // The variables that check for errors
    bool errorModule = false;
    bool errorAcw = false;
    bool errorSections = false;
    bool errorCriteria = false;

    // Is run when the page loads and populates the lists with all data from the database that is appropiate for the user logged in
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
        sections = await SectionService.GetSectionsAsync(user.Identity.Name);
        acw = await ACWService.GetAcwsAsync(user.Identity.Name);
    }


    private void LoadFiles(InputFileChangeEventArgs e)
    {

    }

    // When the module selection box is changed, the value of the box is assigned to selectedModule
    public void OnSelectModule(ChangeEventArgs e)
    {
        selectedModule = e.Value.ToString();

    }

    // When the acw selection box is changed, the value of the box is assigned to selectedAcw
    public void OnSelectACW(ChangeEventArgs e)
    {
        selectedACW = e.Value.ToString();
    }

    // When the section selection box is changed, the value of the box is assigned to selectedSection
    public void OnSelectSection(ChangeEventArgs e)
    {
        selectedSection1 = e.Value.ToString();
    }

    // When the criteria selection box is changed, the value of the box is assigned to selectedCriteria
    public void OnSelectCriteria(ChangeEventArgs e)
    {

        selectedCriteria1 = e.Value.ToString();
    }

    // Will run when the user closes the modal
    void ClosePopup()
    {
        // Close the Popup
        ShowPopUpModule = false;
        ShowPopUpACW = false;
        showPopUpFeedback = false;

        // Resets error messages
        errorModule = false;
        errorAcw = false;
        errorSections = false;
        errorCriteria = false;
    }

    // When the user presses the button to add a module, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewModule()
    {
        inputModules = new Modules();
        inputModules.Id = 0;
        ShowPopUpModule = true;
    }

    // When the user presses the button to add an acw, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewACW()
    {
        inputACW = new Acw();
        inputSections = new Sections();
        inputCriteria = new Criteria();

        inputACW.Id = 0;
        ShowPopUpACW = true;
    }

    // When the user presses the button to add feedback, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewFeedback()
    {
        inputFeedback = new Feedback();
        inputACW.Id = 0;
        showPopUpFeedback = true;
    }


    // When the user presses save in the module modal, the following code will run
    async Task SaveModule()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputModules.ModuleName == null || inputModules.ModuleName == "")
        {
            errorModule = true;
        }
        // if the user has enetered something that already exsists in the database and presses save, the error will display
        else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
        {
            errorModule = true;
        }

        // if there are no errors, the following code will run
        if (errorModule == false)
        {
            // Close the Popup
            ShowPopUpModule = false;
            // ID has been set to 0 so that the primary key knows to continue within the database
            if (inputModules.Id == 0)
            {
                // Creates the new module
                Modules NewModule = new Modules();
                // Assigns the data inputted to the newModule corresponding columns
                NewModule.ModuleName = inputModules.ModuleName;
                NewModule.UserName = UserIdentityName;
                // Passes the new module to be created in the module service
                var result = ModuleService.CreateModulesAsync(NewModule);
                return;
            }
        }
        else
        {
            return;
        }
    }


    // When the user presses save in the acw modal, the following code will run
    async Task SaveACW()
    {
         // if the user has not selected a module and presses save, the error will display
        @if (selectedModule == "No Module Chosen")
        {
            errorModule = true;
        }

         // if the user has not entered anything and presses save, the error will display
        if (inputACW.AcwName == null || inputACW.AcwName == "")
        {
            errorAcw = true;
        }

         // if the user has not entered anything and presses save, the error will display
        if (inputSections.SectionName == null || inputSections.SectionName == "")
        {
            errorSections = true;
        }

         // if the user has not entered anything and presses save, the error will display
        if (inputCriteria.Criteria1 == null || inputCriteria.Criteria1 == "")
        {
            errorCriteria = true;
        }

        // if there are no errors, the following code will run
        if (errorAcw == false && errorModule == false && errorSections == false && errorCriteria == false)
        {

            // Close the Popup
            ShowPopUpACW = false;
            if (inputACW.Id == 0)
            {
                // Creates the new acw
                Acw newACW = new Acw();
                newACW.ModuleName = selectedModule;
                newACW.AcwName = inputACW.AcwName;
                newACW.UserName = UserIdentityName;
                // Passes the new acw to be created in the acw service
                var acwInsert = ACWService.CreateACWAsync(newACW);

                // Creates the new section
                Sections newSection = new Sections();
                newSection.Id = 0;
                newSection.SectionName = inputSections.SectionName;
                newSection.ModuleName = selectedModule;
                newSection.Acwname = inputACW.AcwName;
                newSection.UserName = UserIdentityName;
                // Passes the new section to be created in the section service
                var sectionInsert = SectionService.CreateSectionsAsync(newSection);

                // Creates the new criteria
                Criteria newCriteria = new Criteria();
                newCriteria.Id = 0;
                newCriteria.Criteria1 = inputCriteria.Criteria1;
                newCriteria.SectionName = inputSections.SectionName;
                newCriteria.Acwname = inputACW.AcwName;
                newCriteria.ModuleName = selectedModule;
                newCriteria.UserName = UserIdentityName;
                // Passes the new criteria to be created in the criteria service
                var criteriaInsert = CriteriaService.CreateCriteriaAsync(newCriteria);
                return;
            }
            else
            {
                return;
            }

        }
    }

     // When the user presses save in the feedback modal, the following code will run
    async Task SaveFeedback()
    {
        // Close the Popup
        showPopUpFeedback = false;
        if (inputFeedback.Id == 0)
        {
            // Creates the new feedback
            Feedback newFeedback = new Feedback();
            newFeedback.Feedback1 = inputFeedback.Feedback1;
            newFeedback.ModuleName = selectedModule;
            newFeedback.Acwname = selectedACW;
            newFeedback.SectionName = selectedSection1;
            newFeedback.Criteria = selectedCriteria1;
            newFeedback.UserName = UserIdentityName;
            // Passes the new feedback to be created in the criteria service
            var feedbackInsert = FeedbackService.CreateFeedbackAsync(newFeedback);
            return;
        }
    }
}
