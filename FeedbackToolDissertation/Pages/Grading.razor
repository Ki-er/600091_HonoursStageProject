@using Blazored.Modal
@using Blazored.Modal.Services
@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation

@inject ModuleService ModuleService
@inject ACWService ACWService
@inject CriteriaService CriteriaService
@inject SectionService SectionService
@inject FeedbackService FeedbackService

@page "/Grading"

<h3>Grading</h3>

<div class="fileinsert"
<InputFile OnChange="@LoadFiles" />
</div>
<br />
<form method="post">
    <label> Student </label>
    <input type="text" id="snumber" placeholder="Student Number" name="snumber">
    <br />
    <label> Module</label>

    <select @onchange="@OnSelectModule">
        @if (moduleList == null)
        {
            <p><em>Loading....</em></p>
            selectedModule = "No Module Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Module</option>
            @foreach (var module in moduleList)
            {
                <option value = "@module.ModuleName">@module.ModuleName</option>
            }
  

        }
    </select>
    <button type="button" class="btn btn-primary"@onclick="AddNewModule">+</button>

     @if(ShowPopUpModule)
    {
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Add new module</h3>
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control" type="text"
                                placeholder="Module Name"
                               @bind="objModules.ModuleName" />
                                <br />
                                <button type="button" class="btn btn-success" @onclick="SaveModule"> Save </button>;
                             </div>
                        </div>
                    </div>
                </div> 
}


    @*ACW Dropdown Box*@
    <br />
    <label> ACW</label>
    <select @onchange="@OnSelectACW">
         
        @if (acw == null)
        {
            <p><em>Loading....</em></p>
            selectedACW = "No Module Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your ACW</option>
            @foreach (var acwrecord in acw)
            {
                @if (acwrecord.ModuleName.Contains(selectedModule))
                {
                    <option value="@acwrecord.AcwName">@acwrecord.AcwName</option>
                }
                else
                {
                    selectedACW = "No Module Chosen";
                }
            }
    }
    </select>
    <button type="button" class="btn btn-primary"@onclick="AddNewACW">+</button>


    @if (ShowPopUpACW)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new ACW</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label>@selectedModule </label>
                        <input class="form-control" type="text"
                                placeholder="ACW Name"
                               @bind="objACW.AcwName" />
                        <br />




                        <button type="button" class="btn btn-success" @onclick="SaveACW"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }















    <br />
    <br />
     
    <h8> Feedback </h8>
    @*Section 1*@
    <br />
    Section 1
    <br />
    <select id="section1" name="section1" @onchange="@OnSelectSection">
        @if (sections == null)
        {
            <p><em>Loading....</em></p>
            selectedSection1 = "zzz";

        }
        else
        {
            <option value="" selected hidden>Select your Sections</option>
            @foreach (var sectionrecord in sections)
            {
                @if (sections.Any(o => o.Acwname.Contains(selectedACW)) && (sections.Any(o => o.ModuleName.Contains(selectedModule))))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                }
                else
                {
                    selectedACW = "zzz";
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Criteria*@
    <select id="criteria" name="criteria" @onchange = "@OnSelectCriteria">
        @if (criteria == null)
        {
            <p><em>Loading....</em></p>
            selectedCriteria1 = "zzz";
        }
        else
        {
            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteria.Any(o => o.SectionName.Contains(selectedSection1)) && (criteria.Any(o => o.ModuleName.Contains(selectedModule))) && (criteria.Any(o => o.Acwname.Contains(selectedACW))))
                {
                   <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                }
                else
                {
                    selectedSection1 = "zzz";
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Feedback*@
    <select id="feedback" name="feedback">
        @if (feedback == null)
        {
            <p><em>Loading....</em></p>
        }
        else
        {            
            <option value=""  selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedback.Any(o => o.Criteria.Contains(selectedCriteria1)) && (feedback.Any(o => o.ModuleName.Contains(selectedModule))) && (feedback.Any(o => o.Acwname.Contains(selectedACW))))
                {
                    <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1</option>

                }
            }
        }
    </select>

    <br />
    <br />
    @*Section 1*@

    @*section*@
    Section 2
    <br />
    <select id="section1" name="section1" @onchange="@OnSelectSection">
        @if (sections == null)
        {
            <p><em>Loading....</em></p>
            selectedSection1 = "zzz";

        }
        else
        {
            <option value="" selected hidden>Select your Sections</option>
            @foreach (var sectionrecord in sections)
            {
                @if (sections.Any(o => o.Acwname.Contains(selectedACW)) && sections.Any(o => o.ModuleName.Contains(selectedModule)))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                }
                else
                {
                    selectedCriteria1 = "zzz";
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Criteria*@
    <select id="criteria" name="criteria" @onchange = "@OnSelectCriteria">
        @if (criteria == null)
        {
            <p><em>Loading....</em></p>
            selectedCriteria1 = "zzz";
        }
        else
        {
            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteria.Any(o => o.SectionName.Contains(selectedSection1)) && criteria.Any(o => o.ModuleName.Contains(selectedModule)))
                {
                    <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                }
            }
        }
    }
    </select>
    <br />
    <br />

    @*Feedback*@
    <select id="feedback" name="feedback">
        @if (feedback == null)
        {
            <p><em>Loading....</em></p>
        }
        else
        {            
            <option value=""  selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedback.Any(o => o.Criteria.Contains(selectedCriteria1)) && feedback.Any(o => o.ModuleName.Contains(selectedModule)))
                {
                   <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1</option>

                }
            }
        }
    </select>
    <br />
    <br />


    <button type="submit" class="btn btn-primary">Export</button>
</form>




@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]

    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string UserIdentityName = "";

    List<Modules> moduleList;
    List<Feedback> feedback;
    List<Criteria> criteria;
    List<Sections> sections;
    List<Acw> acw;

    string selectedModule;
    string selectedACW;
    string selectedSection1;
    string selectedCriteria1;


    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }        
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
        sections = await SectionService.GetSectionsAsync(user.Identity.Name);
        acw = await ACWService.GetAcwsAsync(user.Identity.Name);
    }


    private void LoadFiles(InputFileChangeEventArgs e)
    {

    }

    public void OnSelectModule(ChangeEventArgs e)
    {
        selectedModule = e.Value.ToString();

    }

    public void OnSelectACW(ChangeEventArgs e)
    {
        selectedACW = e.Value.ToString();
    }

    public void OnSelectSection(ChangeEventArgs e)
    {
        selectedSection1 = e.Value.ToString();
    }

    public void OnSelectCriteria(ChangeEventArgs e)
    {
        selectedCriteria1 = e.Value.ToString();
    }

    Modules objModules = new Modules();
    Acw objACW = new Acw();



    bool ShowPopUpModule = false;
    bool ShowPopUpACW = false;




    void ClosePopup()
    {
        // Close the Popup
        ShowPopUpModule = false;
        ShowPopUpACW = false;
    }

    void AddNewModule()
    {
        objModules = new Modules();
        objModules.Id = 0;
        ShowPopUpModule = true;
    }

    void AddNewACW()
    {
        objACW = new Acw();
        objACW.Id = 0;
        ShowPopUpACW = true;
    }

    async Task SaveModule()
    {
        // Close the Popup
        ShowPopUpModule = false;
        if (objModules.Id == 0)
        {
            Modules objNewModules = new Modules();
            objNewModules.ModuleName = objModules.ModuleName;
            objNewModules.UserName = UserIdentityName;
            var result = ModuleService.CreateModulesAsync(objNewModules);
            await InvokeAsync(StateHasChanged);
            return;
        }
    }

    async Task SaveACW()
    {
        // Close the Popup
        ShowPopUpACW = false;
        if (objACW.Id == 0)
        {
            Acw newACW = new Acw();
            newACW.ModuleName = selectedModule;
            newACW.AcwName = objACW.AcwName;
            newACW.UserName = UserIdentityName;
            var result = ACWService.CreateACWAsync(newACW);





            await InvokeAsync(StateHasChanged);
            return;
        }
    }



}
