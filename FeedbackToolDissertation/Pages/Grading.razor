@using System
@using System.IO
@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using BlazorDownloadFile

@inject ILogger<Grading> Logger
@inject IWebHostEnvironment Environment
@inject ModuleService ModuleService
@inject ACWService ACWService
@inject CriteriaService CriteriaService
@inject SectionService SectionService
@inject FeedbackService FeedbackService


@page "/Grading"

<h3>Grading</h3>

<div class="fileinsert"
<InputFile OnChange="@LoadFiles" />
</div>
<br />

<form>
    <label> Student </label>
    <input type="text" id="snumber" placeholder="Student Number" name="snumber" @bind=@studentNumber>
    <br />
    @*Module Dropdown Box*@
    <label> Module </label>
    <select @bind="@selectedModule">
        @if (moduleList == null)
        {
            <p><em>Loading....</em></p>
            selectedModule = "No Module Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Module</option>
            @foreach (var module in moduleList)
            {
                <option value="@module.ModuleName">@module.ModuleName</option>
            }
        }
    </select>
    <button type="button" class="btn btn-primary" @onclick="AddNewModule">+</button>
    <button type="button" class="btn btn-danger" @onclick="@(() => { SetModuleBoolTrue(); DeletePopUp(); })">-</button>
    <br />


    @*ACW Dropdown Box*@
    <label> ACW </label>
    <select @bind="@selectedACW" autocomplete="off">
        @if (acw == null)
        {
            <p><em>Loading....</em></p>
            selectedACW = "No ACW Chosen";
        }
        else
        {
            <option value="" selected="selected" hidden>Select your ACW</option>
            @foreach (var acwrecord in acw)
            {
                @if (acwrecord.ModuleName.Contains(selectedModule))
                {
                    <option value="@acwrecord.AcwName">@acwrecord.AcwName</option>
                    presentACW = true;
                }
                else if (presentACW == false)
                {
                    <option value="" selected hidden>Select your ACW</option>
                    selectedACW = "No ACW Chosen";
                }
            }
        }
    </select>
    <button type="button" class="btn btn-primary" @onclick="AddNewACW">+</button>
    <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
    <br />



    <h8> Feedback </h8>
    <br />
    Section 1
    <br />
    <select @bind="@selectedSection1">
        @if (sections == null)
        {
            <p><em>Loading....</em></p>
            selectedSection1 = "No Section Chosen";
        }
        else
        {
            presentCriteria = false;
            presentFeedback = false;
            <option value="" selected hidden>Select your Sections</option>
            @foreach (var sectionrecord in sections)
            {
                @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                    presentSection = true;
                }
                else if (presentSection == false)
                {
                    <option value="" selected hidden>Select your Section</option>
                    selectedSection1 = "No Section Chosen";
                }
            }
        }

    </select>
    <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
    <button type="button" class="btn btn-danger" @onclick="@(() => { SetSection1BoolTrue(); DeletePopUp(); })">-</button>
    <br />
    <br />

    <select id="criteria" name="criteria" @bind="@selectedCriteria1">
        @if (criteria == null)
        {
            <p><em>Loading....</em></p>
            selectedCriteria1 = "No Criteria Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteriarecord.SectionName.Contains(selectedSection1) && (criteriarecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                    presentCriteria = true;
                }
                else if (presentCriteria == false)
                {
                    <option value="" selected hidden>Select your Criteria</option>
                    selectedCriteria1 = "No Criteria Chosen";
                }
            }
        }
    </select>
    <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection1BoolTrue(); AddNewCriteria(); })">+</button>
    <br />

    @*Feedback Dropdown Box*@
    <select id="feedback" name="feedback" @bind="@selectedFeedback1">
        @if (feedback == null)
        {
            <p><em>Loading....</em></p>
            selectedFeedback1 = "No Feedback Chosen";
        }
        else
        {
            <option value="" selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedbackrecord.Criteria.Contains(selectedCriteria1) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                    presentFeedback = true;
                }
                else if (presentFeedback == false)
                {
                    <option value="" selected hidden>Select your Feedback</option>
                }
            }
        }
    </select>
    <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection1BoolTrue(); AddNewFeedback(); })">+</button>
    <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
    <br />
    <br />


    @if (showNewSection)
    {
        <h8>Section 2 </h8>
        <br />
        <select @bind="@selectedSection2">
            <option value="" selected>Select your Sections</option>
            @foreach (var sectionrecord in sections)
            {
                @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                    presentSection = true;
                }
                else if (presentSection == false)
                {
                    <option value="" hidden>Select your Section</option>
                }
            }
        </select>

        <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
        <br />
        <br />


        <select id="criteria" name="criteria" @bind="@selectedCriteria2">

            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteriarecord.SectionName.Contains(selectedSection2) && (criteriarecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                    presentCriteria = true;
                }
                else if (presentCriteria == false)
                {
                    selectedCriteria2 = "No Criteria Chosen";
                    <option value="" selected hidden>Select your Criteria</option>
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection2BoolTrue(); AddNewCriteria(); })">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
        <br />
        <br />

        <select id="feedback" name="feedback">
            <option value="" selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedbackrecord.Criteria.Contains(selectedCriteria2) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                    presentFeedback = true;
                }
                else if (presentFeedback == false)
                {
                    <option value="" selected hidden>Select your Feedback</option>
                }
            }

        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection2BoolTrue(); AddNewFeedback(); })">+</button>
        <br />
        <br />
    }


    @if (showNewSection && sectionCounter == 3)
    {
        <h8>Section @sectionCounter </h8>
        <br />
        <select id="section1" name="section1" @bind="@selectedSection3">
            <option value="" selected>Select your Sections</option>

            @foreach (var sectionrecord in sections)
            {
                @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                    presentSection = true;
                }
                else if (presentSection == false)
                {
                    <option value="" selected hidden>Select your Section</option>
                    selectedSection3 = "No Section Chosen";
                }
            }
        </select>

        <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
        <br />
        <br />


        <select id="criteria" name="criteria" @bind="@selectedCriteria3">
            <option value="" selected hidden>Select your Criteria</option>
            @foreach (var criteriarecord in criteria)
            {
                @if (criteriarecord.SectionName.Contains(selectedSection3) && (criteriarecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                    presentCriteria = true;
                }
                else if (presentCriteria == false)
                {
                    <option value="" selected hidden>Select your Criteria</option>
                    selectedCriteria3 = "No Criteria Chosen";
                }
            }

        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection3BoolTrue(); AddNewCriteria(); })">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
        <br />
        <br />

        <select id="feedback" name="feedback">
            <option value="" selected hidden>Select your Feedback</option>
            @foreach (var feedbackrecord in feedback)
            {
                @if (feedbackrecord.Criteria.Contains(selectedCriteria3) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                {
                    <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                    presentFeedback = true;
                }
                else if (presentFeedback == false)
                {
                    <option value="" selected hidden>Select your Feedback</option>
                }
            }

        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection3BoolTrue(); AddNewFeedback(); })">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => {})">-</button>
        <br />
        <br />

    }

    @if (sectionCounter != 3)
    {
        <button type="button" class="btn btn-primary" @onclick="ShowNewSection">Show New Section</button>
    }



    @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
    @if (ShowPopUpModule)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new module</h3>
                        @*Close button on top right of modal*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        <input class="form-control" type="text" placeholder="Module Name" @bind="inputModules.ModuleName" />
                        <br />
                        @*When the user has entered a module, and presses save, the saveModule method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveModule"> Save </button>
                        <br />
                        <br />
                        @*If there is something wrong with the form, error module will be true and the following code will run*@
                        @if (errorModule == true)
                        {
                            @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                            if (inputModules.ModuleName == null || inputModules.ModuleName == "")
                            {
                                <label class="alert-danger">No Module Entered</label>
                            }
                            @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                            else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
                            {
                                <label class="alert-danger">Module is already within Database</label>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }


    @*When showPopUpACW is true, the following modal will display*@
    @if (ShowPopUpACW)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        @*Modal title *@
                        <h3 class="modal-title">Add new ACW</h3>
                        @*Button that closes the modal and resets any error messages displayed*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        @*Displays selectedModule variable*@
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        @*Insert ACW for the selected module*@
                        <h8>Insert ACW</h8>
                        <input class="form-control" type="text" placeholder="ACW Name" @bind="inputACW.AcwName" />
                        <br />
                        @*When the user has entered the appropiate details, and presses save, the saveACW method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveACW"> Save </button>
                        <br />
                        <br />
                        @if (errorAcw == true)
                        {
                            @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                            if (selectedModule == "No Module Chosen")
                            {
                                <label class="alert-danger">No Module Entered</label>
                            }

                            @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                            @foreach (var acwrecord in acw)
                            {
                                if (acwrecord.AcwName.Contains(inputACW.AcwName) && acwrecord.ModuleName.Contains(selectedModule))
                                {
                                    <label class="alert-danger">Already in database</label>
                                }
                            }
                        }
                    </div>t
                </div>
            </div>
        </div>
    }

    @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
    @if (ShowPopUpSection)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new section</h3>
                        @*Close button on top right of modal*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        <input class="form-control" type="text" placeholder="Section" @bind="inputSections.SectionName" />
                        <br />
                        @*When the user has entered a module, and presses save, the saveModule method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveSections"> Save </button>
                        <br />
                        <br />
                        @*If there is something wrong with the form, error module will be true and the following code will run*@
                        @if (errorModule == true)
                        {
                            @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                            if (inputModules.ModuleName == null || inputModules.ModuleName == "")
                            {
                                <label class="alert-danger">No Module Entered</label>
                            }
                            @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                            else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
                            {
                                <label class="alert-danger">Module is already within Database</label>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
    @if (ShowPopUpCriteria)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new module</h3>
                        @*Close button on top right of modal*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        @if (selectedSection1Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection1 </label>
                        }
                        @if (selectedSection2Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection2 </label>
                        }
                        @if (selectedSection3Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection3 </label>
                        }
                        <br />
                        <input class="form-control" type="text" placeholder="Criteria" @bind="inputCriteria.Criteria1" />
                        <br />
                        @*When the user has entered a module, and presses save, the saveModule method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveCriteria"> Save </button>
                        <br />
                        <br />
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showPopUpFeedback)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add new Feedback</h3>
                        @*Button that closes the modal and resets any error messages displayed*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">
                        @*Displays selected module*@
                        <label>Module:</label>
                        <label>@selectedModule </label>
                        <br />
                        @*Displays selected acw*@
                        <label>ACW:</label>
                        <label>@selectedACW </label>
                        <br />
                        @if (selectedSection1Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection1 </label>
                            <br />
                            @*Displays selected criteria*@
                            <label>Criteria:</label>
                            <label>@selectedCriteria1 </label>
                        }
                        else if (selectedSection2Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection2 </label>
                            <br />
                            @*Displays selected criteria*@
                            <label>Criteria:</label>
                            <label>@selectedCriteria2 </label>
                        }
                        else if (selectedSection3Bool)
                        {
                            <label>Section:</label>
                            <label>@selectedSection3 </label>
                            <br />
                            @*Displays selected criteria*@
                            <label>Criteria:</label>
                            <label>@selectedCriteria3 </label>
                        }
                        <br />
                        @*Input box to allow for adding feedback*@
                        <h8>Insert Feedback</h8>
                        <input class="form-control" type="text" placeholder="Feedback" @bind="inputFeedback.Feedback1" />
                        <br />
                        <h8>Insert Feedback</h8>
                        <input class="form-control" type="number" placeholder="Grade" @bind="inputFeedback.Grade" />
                        <br />
                        @*When the user has entered the appropiate details, and presses save, the saveFeedback method will run*@
                        <button type="button" class="btn btn-success" @onclick="SaveFeedback"> Save </button>;
                    </div>
                </div>
            </div>
        </div>
    }

    @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
    @if (confirmationPopup)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        @*Modal title *@
                        <h3 class="modal-title">Confirm Deletion</h3>
                        @*Button that closes the modal and resets any error messages displayed*@
                        <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                    </div>
                    <div class="modal-body">

                        <label>Confirmation: This will delete</label>
                        @if (selectedModulebool)
                        {
                            <label>@selectedModule</label>
                        }
                        else if (selectedACWbool)
                        {
                            <label>@selectedACW</label>
                        }
                        else if (@selectedSection1Bool)
                        {
                            <label>@selectedSection1</label>
                        }
                        else if (@selectedSection2Bool)
                        {
                            <label>@selectedSection2</label>
                        }
                        else if (@selectedSection3Bool)
                        {
                            <label>@selectedSection3</label>
                        }
                        else if (@selectedCriteria1bool)
                        {
                            <label>@selectedCriteria1</label>
                        }
                        else if (@selectedCriteria2bool)
                        {
                            <label>@selectedCriteria2</label>
                        }
                        else if (@selectedCriteria3bool)
                        {
                            <label>@selectedCriteria3</label>
                        }
                        <br />
                        @*When the user has entered the appropiate details, and presses save, the saveACW method will run*@
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion"> Delete </button>
                        <br />
                        <br />

                        @if (errorModule == true)
                        {
                            @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                            if (selectedModule == "No Module Chosen")
                            {
                                <label class="alert-danger">No Module Chosen</label>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <br />

    <button type="button" class="btn btn-primary" @onclick="DownloadFile">Export to File</button>
</form>


@code {

    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]

    // Gets the user who is logged in
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string UserIdentityName = "";

    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }


    // Creates the lists pulled from the database tables
    List<Modules> moduleList;
    List<Feedback> feedback;
    List<Feedback> unsortedFeedback;
    List<Criteria> criteria;
    List<Sections> sections;
    List<Acw> acw;

    // The variables that will be edited when the user interactes with the dropdown boxes
    string studentNumber;
    string selectedModule;
    string selectedACW;
    bool selectedModulebool, selectedACWbool;

    string selectedSection1;
    string selectedSection2 = "No Section Chosen";
    string selectedSection3 = "No Section Chosen";
    bool selectedSection1Bool, selectedSection2Bool, selectedSection3Bool = false;

    string selectedCriteria1;
    string selectedCriteria2 = "No Criteria Chosen";
    string selectedCriteria3 = "No Criteria Chosen";
    bool selectedCriteria1bool, selectedCriteria2bool, selectedCriteria3bool = false;

    string selectedFeedback1;
    string selectedFeedback2 = "";
    string selectedFeedback3 = "";


    // The variables that prevent overwriting of the selected variables
    bool presentModule;
    bool presentACW;
    bool presentSection;
    bool presentCriteria;
    bool presentFeedback;

    // The variables used for when displaying the modals
    bool ShowPopUpModule = false;
    bool ShowPopUpACW = false;
    bool ShowPopUpSection = false;
    bool ShowPopUpCriteria = false;
    bool showPopUpFeedback = false;

    // The variables that show new sections
    bool showNewSection = false;
    int sectionCounter = 1;

    // The variables that allow for new data to be added to the databases
    Modules inputModules = new Modules();
    Acw inputACW = new Acw();
    Sections inputSections = new Sections();
    Criteria inputCriteria = new Criteria();
    Feedback inputFeedback = new Feedback();

    // The variables that check for errors
    bool errorModule = false;
    bool errorAcw = false;
    bool errorSections = false;
    bool errorCriteria = false;

    bool confirmationPopup = false;

    // Is run when the page loads and populates the lists with all data from the database that is appropiate for the user logged in
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        unsortedFeedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
        sections = await SectionService.GetSectionsAsync(user.Identity.Name);
        acw = await ACWService.GetAcwsAsync(user.Identity.Name);

        feedback = unsortedFeedback.OrderByDescending(o => o.Grade).ToList();
    }

    string trustedFileNameForFileStorage = "";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        trustedFileNameForFileStorage = Path.GetRandomFileName();
    }

    void ShowNewSection()
    {
        showNewSection = true;
        sectionCounter++;
    }

    // Will run when the user closes the modal
    void ClosePopup()
    {
        // Close the Popup
        ShowPopUpModule = false;
        ShowPopUpACW = false;
        showPopUpFeedback = false;
        ShowPopUpSection = false;
        ShowPopUpCriteria = false;

        // Resets error messagesS
        errorModule = false;
        errorAcw = false;
        errorSections = false;
        errorCriteria = false;

        selectedModulebool = false;
        selectedACWbool = false;

        selectedSection1Bool = false;
        selectedSection2Bool = false;
        selectedSection3Bool = false;

        selectedCriteria1bool = false;
        selectedCriteria2bool = false;
        selectedCriteria3bool = false;

        confirmationPopup = false;
    }

    // When the user presses the button to add a module, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewModule()
    {
        inputModules = new Modules();
        inputModules.Id = 0;
        ShowPopUpModule = true;
    }

    // When the user presses the button to add an acw, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewACW()
    {
        inputACW = new Acw();
        inputACW.Id = 0;
        ShowPopUpACW = true;
    }

    void AddNewSection()
    {
        inputSections = new Sections();
        inputSections.Id = 0;
        ShowPopUpSection = true;
    }



    void AddNewCriteria()
    {
        inputCriteria = new Criteria();
        inputCriteria.Id = 0;
        ShowPopUpCriteria = true;
    }

    // When the user presses the button to add feedback, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewFeedback()
    {
        inputFeedback = new Feedback();
        inputACW.Id = 0;
        showPopUpFeedback = true;
    }

    void SetModuleBoolTrue()
    {
        selectedModulebool = true;
    }

    void SetACWBoolTrue()
    {
        selectedACWbool = true;
    }

    void SetSection1BoolTrue()
    {
        selectedSection1Bool = true;
        selectedCriteria1bool = true;
    }

    void SetSection2BoolTrue()
    {
        selectedSection2Bool = true;
        selectedCriteria2bool = true;
    }

    void SetSection3BoolTrue()
    {
        selectedSection3Bool = true;
        selectedCriteria3bool = true;
    }




    // When the user presses save in the module modal, the following code will run
    async Task SaveModule()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputModules.ModuleName == null || inputModules.ModuleName == "")
        {
            errorModule = true;
        }
        // if the user has enetered something that already exsists in the database and presses save, the error will display
        else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
        {
            errorModule = true;
        }

        // if there are no errors, the following code will run
        if (errorModule == false)
        {
            // Close the Popup
            ShowPopUpModule = false;
            // ID has been set to 0 so that the primary key knows to continue within the database
            if (inputModules.Id == 0)
            {
                // Creates the new module
                Modules NewModule = new Modules();
                // Assigns the data inputted to the newModule corresponding columns
                NewModule.ModuleName = inputModules.ModuleName;
                NewModule.UserName = UserIdentityName;
                // Passes the new module to be created in the module service
                var result = ModuleService.CreateModulesAsync(NewModule);

                var user = (await authenticationStateTask).User;
                moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
                return;
            }
        }
        else
        {
            return;
        }
    }

    // When the user presses save in the acw modal, the following code will run
    async Task SaveACW()
    {
        // if the user has not selected a module and presses save, the error will display
        @if (selectedModule == "No Module Chosen")
        {
            errorModule = true;
        }

        // if the user has not entered anything and presses save, the error will display
        if (inputACW.AcwName == null || inputACW.AcwName == "")
        {
            errorAcw = true;
        }

        foreach (var acwrecord in acw)
        {
            if (acwrecord.AcwName.Contains(inputACW.AcwName) && acwrecord.ModuleName.Contains(selectedModule))
            {
                errorAcw = true;
            }
        }

        // if there are no errors, the following code will run
        if (errorAcw == false && errorModule == false && errorSections == false && errorCriteria == false)
        {

            // Close the Popup
            ShowPopUpACW = false;
            if (inputACW.Id == 0)
            {
                // Creates the new acw
                Acw newACW = new Acw();
                newACW.ModuleName = selectedModule;
                newACW.AcwName = inputACW.AcwName;
                newACW.UserName = UserIdentityName;
                // Passes the new acw to be created in the acw service
                var acwInsert = ACWService.CreateACWAsync(newACW);
                var user = (await authenticationStateTask).User;
                acw = await ACWService.GetAcwsAsync(user.Identity.Name);
                return;
            }
            else
            {
                return;
            }
        }
    }

    async Task SaveSections()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputSections.SectionName == null || inputSections.SectionName == "")
        {
            errorSections = true;
        }

        if (errorSections == false)
        {
            // Close the Popup
            ShowPopUpSection = false;

            // Creates the new section
            Sections newSection = new Sections();
            newSection.Id = 0;
            newSection.SectionName = inputSections.SectionName;
            newSection.ModuleName = selectedModule;
            newSection.Acwname = selectedACW;
            newSection.UserName = UserIdentityName;
            // Passes the new section to be created in the section service
            var sectionInsert = SectionService.CreateSectionsAsync(newSection);
            var user = (await authenticationStateTask).User;
            sections = await SectionService.GetSectionsAsync(user.Identity.Name);
            return;
        }

    }

    async Task SaveCriteria()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputCriteria.Criteria1 == null || inputCriteria.Criteria1 == "")
        {
            errorCriteria = true;
        }

        if (errorCriteria == false)
        {
            // Close the Popup
            ShowPopUpCriteria = false;

            // Creates the new criteria
            Criteria newCriteria = new Criteria();
            newCriteria.Id = 0;
            newCriteria.Criteria1 = inputCriteria.Criteria1;
            if (selectedSection1Bool)
            {
                newCriteria.SectionName = selectedSection1;
            }
            else if (selectedSection2Bool)
            {
                newCriteria.SectionName = selectedSection2;
            }
            else if (selectedSection3Bool)
            {
                newCriteria.SectionName = selectedSection3;
            }

            newCriteria.Acwname = selectedACW;
            newCriteria.ModuleName = selectedModule;
            newCriteria.UserName = UserIdentityName;
            // Passes the new criteria to be created in the criteria service
            var criteriaInsert = CriteriaService.CreateCriteriaAsync(newCriteria);
            var user = (await authenticationStateTask).User;
            criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
            return;
        }
    }



    // When the user presses save in the feedback modal, the following code will run
    async Task SaveFeedback()
    {
        // Close the Popup
        showPopUpFeedback = false;
        // Creates the new feedback
        Feedback newFeedback = new Feedback();
        newFeedback.Feedback1 = inputFeedback.Feedback1;
        newFeedback.Grade = inputFeedback.Grade;
        newFeedback.ModuleName = selectedModule;
        newFeedback.Acwname = selectedACW;
        if (selectedSection1Bool)
        {
            newFeedback.SectionName = selectedSection1;
        }
        else if (selectedSection2Bool)
        {
            newFeedback.SectionName = selectedSection2;
        }
        else if (selectedSection3Bool)
        {
            newFeedback.SectionName = selectedSection3;
        }

        if (selectedSection1Bool)
        {
            newFeedback.Criteria = selectedCriteria1;
        }
        else if (selectedSection2Bool)
        {
            newFeedback.Criteria = selectedCriteria2;
        }
        else if (selectedSection3Bool)
        {
            newFeedback.Criteria = selectedCriteria3;
        }
        newFeedback.UserName = UserIdentityName;

        // Passes the new feedback to be created in the criteria service
        var feedbackInsert = FeedbackService.CreateFeedbackAsync(newFeedback);
        var user = (await authenticationStateTask).User;
        feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        return;
    }

    void DeletePopUp()
    {
        confirmationPopup = true;
    }

    async Task ConfirmDeletion()
    {
        confirmationPopup = false;
        if (selectedModulebool)
        {
            foreach (var module in moduleList)
            {
                if (module.ModuleName == selectedModule)
                {
                    var moduleDelete = ModuleService.DeleteModulesAsync(module);
                }
            }
            var user = (await authenticationStateTask).User;
            moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
            return;
        }
        else if (selectedACWbool)
        {
                foreach (var acoursework in acw)
                {
                    if (acoursework.AcwName == selectedACW)
                    {
                        var acwDelete = ACWService.DeleteACWAsync(acoursework);
                    }
                }
                var user = (await authenticationStateTask).User;
                moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
                return;
            }
        }

    }



    async Task DownloadFile()
    {
        var buffer = new MemoryStream();
        var writer = new BinaryWriter(buffer);

        writer.Write("Student Number: " + studentNumber + "\r\n");
        writer.Write("Module: " + selectedModule + "\r\n");
        writer.Write("ACW: " + selectedACW + "\r\n");
        writer.Write("\r\n");


        writer.Write("Section 1" + "\r\n");
        writer.Write("Section: " + selectedSection1 + "\r\n");
        writer.Write("Criteria: " + selectedCriteria1 + "\r\n");
        writer.Write("Feedback: " + selectedFeedback1 + "\r\n");
        writer.Write("\r\n");

        if (showNewSection)
        {
            writer.Write("Section 2" + "\r\n");
            writer.Write("Section: " + selectedSection2 + "\r\n");
            writer.Write("Criteria: " + selectedCriteria2 + "\r\n");
            writer.Write("Feedback: " + selectedFeedback2 + "\r\n");
            writer.Write("\r\n");
            writer.Write("Section 3" + "\r\n");
            writer.Write("Section: " + selectedSection3 + "\r\n");
            writer.Write("Criteria: " + selectedCriteria3 + "\r\n");
            writer.Write("Feedback: " + selectedFeedback3 + "\r\n");
        }

        writer.Close();
        byte[] bytes = buffer.ToArray();
        var task = await BlazorDownloadFileService.DownloadFile(studentNumber, bytes, "text/plain");

    }


}
