@using System
@using System.IO
@using System.Timers;
@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using BlazorDownloadFile

@inject ILogger<Grading> Logger
@inject IWebHostEnvironment Environment
@inject ModuleService ModuleService
@inject ACWService ACWService
@inject CriteriaService CriteriaService
@inject SectionService SectionService
@inject FeedbackService FeedbackService

@page "/Grading"

<h3>Grading</h3>
<body>
    <h8>No Data Displaying? Click Here:</h8>
    <button type="button" class="btn btn-primary" @onclick="LoadValues">Load Data</button>
    <br />
    <h8>Be sure to check that you have added data to the database!</h8>
    <br />
    <br />
    <form>
        <label> Student </label>
        <input type="text" id="snumber" placeholder="Student Number" name="snumber" @bind=@studentNumber>
        <br />

        @*Module Dropdown Box*@
        <label> Module </label>
        <select @bind="@selectedModule">
            @if (moduleList == null)
            {
                <p><em>Loading....</em></p>
                selectedModule = "No Module Chosen";
            }
            else
            {
                <option value="" selected hidden>Select your Module</option>
                @foreach (var module in moduleList)
                {
                    <option value="@module.ModuleName">@module.ModuleName</option>
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="AddNewModule">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => { SetModuleBoolTrue(); DeletePopUp(); })">-</button>
        <br />


        @*ACW Dropdown Box*@
        <label> ACW </label>
        <select @bind="@selectedACW" autocomplete="off">
            @if (acw == null)
            {
                <p><em>Loading....</em></p>
                selectedACW = "No ACW Chosen";
            }
            else
            {
                <option value="" selected="selected" hidden>Select your ACW</option>
                @foreach (var acwrecord in acw)
                {
                    @if (acwrecord.ModuleName.Contains(selectedModule))
                    {
                        <option value="@acwrecord.AcwName">@acwrecord.AcwName</option>
                        presentACW = true;
                    }
                    else if (presentACW == false)
                    {
                        <option value="" selected hidden>Select your ACW</option>
                        selectedACW = "No ACW Chosen";
                    }
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="AddNewACW">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => { SetACWBoolTrue(); DeletePopUp(); })">-</button>
        <br />

        <h8> Feedback </h8>
        <br />
        <h8>Section 1</h8>
        <br />
        <select @bind="@selectedSection1">
            @if (sections == null)
            {
                <p><em>Loading....</em></p>
                selectedSection1 = "No Section Chosen";
            }
            else
            {
                <option value="" selected hidden>Select your Section</option>
                @foreach (var sectionrecord in sections)
                {
                    @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))

                    {
                        <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                        presentSection = true;
                    }
                    else if (presentSection == false)
                    {
                        <option value="" selected hidden>Select your Section</option>
                        selectedSection1 = "No Section Chosen";
                    }
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => { SetSection1BoolTrue(); DeletePopUp(); })">-</button>
        <br />
        <br />


        <select id="criteria" name="criteria" @bind="@selectedCriteria1">
            @if (criteria == null)
            {
                <p><em>Loading....</em></p>
                selectedCriteria1 = "No Criteria Chosen";
            }
            else
            {
                <option value="" selected hidden>Select your Criteria</option>
                @foreach (var criteriarecord in criteria)
                {
                    @if (criteriarecord.SectionName.Contains(selectedSection1) && (criteriarecord.ModuleName.Contains(selectedModule)))
                    {
                        <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                        presentCriteria = true;
                    }
                    else if (presentCriteria == false)
                    {
                        selectedCriteria1 = "No Criteria Chosen";
                    }
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection1BoolTrue(); AddNewCriteria(); })">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => { SetCriteria1BoolTrue(); DeletePopUp(); })">-</button>
        <br />
        <br />


        @*Feedback Dropdown Box*@
        <select id="feedback" name="feedback" @bind="@selectedFeedback1">
            @if (feedback == null)
            {
                <p><em>Loading....</em></p>
                selectedFeedback1 = "No Feedback Chosen";
            }
            else
            {
                <option value="" selected hidden>Select your Feedback</option>
                @foreach (var feedbackrecord in feedback)
                {
                    @if (feedbackrecord.Criteria.Contains(selectedCriteria1) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                    {
                        <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                        presentFeedback = true;
                    }
                    else if (presentFeedback == false)
                    {
                        selectedFeedback1 = "No Feedback Chosen";
                    }
                }
            }
        </select>
        <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection1BoolTrue(); SetCriteria1BoolTrue(); AddNewFeedback(); })">+</button>
        <button type="button" class="btn btn-danger" @onclick="@(() => { SetFeedback1BoolTrue(); DeletePopUp(); })">-</button>
        <br />
        <br />

        @if (showNewSection)
        {

            <h8>Section 2 </h8>
            <br />
            <select @bind="@selectedSection2">
                <option value="" selected hidden>Select your Section</option>
                @if (selectedSection2 == null)
                {
                    selectedSection2 = "No Section Chosen";
                }
                else
                {
                    @foreach (var sectionrecord in sections)
                    {
                        @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                            presentSection = true;
                        }
                        else if (presentSection == false)
                        {
                            <option value="" selected hidden>Select your Section</option>
                            selectedSection2 = "No Section Chosen";
                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetSection2BoolTrue(); DeletePopUp(); })">-</button>
            <br />
            <br />


            <select id="criteria" name="criteria" @bind="@selectedCriteria2">
                <option value="" selected hidden>Select your Criteria</option>

                @if (selectedCriteria2 == null)
                {
                    selectedCriteria2 = "No Criteria Chosen";
                }
                else
                {
                    @foreach (var criteriarecord in criteria)
                    {
                        <option value="" selected hidden>Select your Criteria</option>

                        @if (criteriarecord.SectionName.Contains(selectedSection2) && (criteriarecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                            presentCriteria = true;
                        }
                        else if (presentCriteria == false)
                        {
                            <option value="" selected hidden>Select your Criteria</option>
                            selectedCriteria2 = "No Criteria Chosen";

                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection2BoolTrue(); AddNewCriteria(); })">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetCriteria2BoolTrue(); DeletePopUp(); })">-</button>
            <br />
            <br />


            <select id="feedback" name="feedback" @bind="@selectedFeedback2">
                <option value="" selected hidden>Select your Feedback</option>
                @if (selectedFeedback2 == null)
                {
                    selectedFeedback2 = "No Feedback Chosen";
                }
                else
                {
                    @foreach (var feedbackrecord in feedback)
                    {
                        <option value="" selected hidden>Select your Criteria</option>

                        @if (feedbackrecord.Criteria.Contains(selectedCriteria2) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                            presentFeedback = true;
                        }
                        else if (presentFeedback == false)
                        {
                            <option value="" selected hidden>Select your Feedback</option>
                            selectedFeedback2 = "No Feedback Chosen";
                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection2BoolTrue(); SetCriteria2BoolTrue(); AddNewFeedback(); })">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetFeedback2BoolTrue(); DeletePopUp(); })">-</button>
            <br />
            <br />
        }


        @if (showNewSection && sectionCounter == 3)
        {
            <h8>Section @sectionCounter </h8>
            <br />
            <select id="section1" name="section1" @bind="@selectedSection3">
                <option value="" selected hidden>Select your Section</option>
                @if (selectedSection3 == null)
                {
                    selectedSection3 = "No Section Chosen";
                }
                else
                {
                    @foreach (var sectionrecord in sections)
                    {
                        @if (sectionrecord.Acwname.Contains(selectedACW) && (sectionrecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@sectionrecord.SectionName">@sectionrecord.SectionName</option>
                            presentSection = true;
                        }
                        else if (presentSection == false)
                        {
                            <option value="" selected hidden>Select your Section</option>
                            selectedSection3 = "No Section Chosen";
                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="AddNewSection">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetSection3BoolTrue(); DeletePopUp(); })">-</button>
            <br />
            <br />


            <select id="criteria" name="criteria" @bind="@selectedCriteria3">
                @if (selectedCriteria3 == null)
                {
                    selectedCriteria3 = "No Criteria Chosen";
                    <option value="" selected hidden>Select your Criteria</option>

                }
                else
                {
                    @foreach (var criteriarecord in criteria)
                    {
                        <option value="" selected hidden>Select your Criteria</option>
                        @if (criteriarecord.SectionName.Contains(selectedSection3) && (criteriarecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@criteriarecord.Criteria1">@criteriarecord.Criteria1</option>
                            presentCriteria = true;
                        }
                        else if (presentCriteria == false)
                        {
                            <option value="" selected hidden>Select your Criteria</option>
                            selectedCriteria3 = "No Criteria Chosen";
                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection3BoolTrue(); AddNewCriteria(); })">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetCriteria3BoolTrue(); DeletePopUp(); })">-</button>
            <br />
            <br />


            <select id="feedback" name="feedback" @bind="@selectedFeedback3">
                @if (selectedFeedback3 == null)
                {
                    selectedFeedback3 = "No Feedback Chosen";
                    <option value="" selected hidden>Select your Feedback</option>
                }
                else
                {
                    @foreach (var feedbackrecord in feedback)
                    {
                        <option value="" selected hidden>Select your Feedback</option>

                        @if (feedbackrecord.Criteria.Contains(selectedCriteria3) && (feedbackrecord.ModuleName.Contains(selectedModule)))
                        {
                            <option value="@feedbackrecord.Feedback1">@feedbackrecord.Feedback1 - @feedbackrecord.Grade</option>
                            presentFeedback = true;
                        }
                        else if (presentFeedback == false)
                        {
                            <option value="" selected hidden>Select your Feedback</option>
                            selectedFeedback3 = "No Feedback Chosen";

                        }
                    }
                }
            </select>
            <button type="button" class="btn btn-primary" @onclick="@(() => { SetSection3BoolTrue(); SetCriteria3BoolTrue(); AddNewFeedback(); })">+</button>
            <button type="button" class="btn btn-danger" @onclick="@(() => { SetFeedback3BoolTrue(); DeletePopUp(); })">-</button>

        }

        @if (sectionCounter != 3)
        {
            <button type="button" class="btn btn-primary" @onclick="ShowNewSection">Show New Section</button>
        }
        <br />
        <br />

        @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
        @if (ShowPopUpModule)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add new module</h3>
                            @*Close button on top right of modal*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">
                            <input class="form-control" type="text" placeholder="Module Name" @bind="inputModules.ModuleName" />
                            <br />
                            @*When the user has entered a module, and presses save, the saveModule method will run*@
                            <button type="button" class="btn btn-success" @onclick="SaveModule"> Save </button>
                            <br />
                            <br />
                            @*If there is something wrong with the form, error module will be true and the following code will run*@
                            @if (errorModule == true)
                            {
                                @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                                if (inputModules.ModuleName == null || inputModules.ModuleName == "")
                                {
                                    <label class="alert-danger">No Module Entered</label>
                                }
                                @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                                else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
                                {
                                    <label class="alert-danger">Module is already within Database</label>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }


        @*When showPopUpACW is true, the following modal will display*@
        @if (ShowPopUpACW)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            @*Modal title *@
                            <h3 class="modal-title">Add new ACW</h3>
                            @*Button that closes the modal and resets any error messages displayed*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">
                            @*Displays selectedModule variable*@
                            <label>Module:</label>
                            <label>@selectedModule </label>
                            <br />
                            @*Insert ACW for the selected module*@
                            <h8>Insert ACW</h8>
                            <input class="form-control" type="text" placeholder="ACW Name" @bind="inputACW.AcwName" />
                            <br />
                            @*When the user has entered the appropiate details, and presses save, the saveACW method will run*@
                            <button type="button" class="btn btn-success" @onclick="SaveACW"> Save </button>
                            <br />
                            <br />
                            @if (errorAcw == true)
                            {
                                @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                                if (selectedModule == "No Module Chosen")
                                {
                                    <label class="alert-danger">No Module Chosen</label>
                                }

                                @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                                @foreach (var acwrecord in acw)
                                {
                                    if (acwrecord.AcwName.Contains(inputACW.AcwName) && acwrecord.ModuleName.Contains(selectedModule))
                                    {
                                        <label class="alert-danger">Already in database</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
        @if (ShowPopUpSection)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add new section</h3>
                            @*Close button on top right of modal*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">
                            <label>ACW:</label>
                            <label>@selectedACW </label>
                            <br />
                            <input class="form-control" type="text" placeholder="Section" @bind="inputSections.SectionName" />
                            <br />
                            @*When the user has entered a module, and presses save, the saveModule method will run*@
                            <button type="button" class="btn btn-success" @onclick="SaveSections"> Save </button>
                            <br />
                            <br />
                            @*If there is something wrong with the form, error module will be true and the following code will run*@
                            @if (errorSections == true)
                            {
                                if (selectedACW == "No ACW Chosen")
                                {
                                    <label class="alert-danger">No ACW Chosen</label>
                                }
                                <br />
                                <br />
                                @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                                if (inputSections.SectionName == null || inputSections.SectionName == "")
                                {
                                    <label class="alert-danger">No Section Entered</label>
                                }
                                @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                                else if (sections.Any(o => o.SectionName.Contains(inputSections.SectionName)) && (sections.Any(o => o.ModuleName.Contains(selectedModule))))
                                {
                                    <label class="alert-danger">Section is already within Database</label>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
        @if (ShowPopUpCriteria)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add new module</h3>
                            @*Close button on top right of modal*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">
                            <label>ACW:</label>
                            <label>@selectedACW </label>
                            <br />
                            @if (selectedSection1Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection1 </label>
                            }
                            @if (selectedSection2Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection2 </label>
                            }
                            @if (selectedSection3Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection3 </label>
                            }
                            <br />
                            <input class="form-control" type="text" placeholder="Criteria" @bind="inputCriteria.Criteria1" />
                            <br />
                            @*When the user has entered a module, and presses save, the saveModule method will run*@
                            <button type="button" class="btn btn-success" @onclick="SaveCriteria"> Save </button>
                            <br />
                            <br />
                            @*If there is something wrong with the form, error module will be true and the following code will run*@
                            @if (errorCriteria == true)
                            {
                                if (selectedACW == "No ACW Chosen")
                                {
                                    <label class="alert-danger">No ACW Chosen</label>
                                }

                                if (selectedSection1 == "No Section Chosen" || selectedSection2 == "No Section Chosen" || selectedSection3 == "No Section Chosen")
                                {
                                    <label class="alert-danger">No Section Chosen</label>
                                }
                                <br />
                                <br />
                                @*If the user has not entered anything within the input box, then they will be reminded to enter something*@
                                if (inputCriteria.Criteria1 == null || inputCriteria.Criteria1 == "")
                                {
                                    <label class="alert-danger">No Criteria Entered</label>
                                }
                                @*If the user has not entered anything within the input box that already exsists, then they will be reminded to enter something else *@
                                else if (criteria.Any(o => o.Criteria1.Contains(inputCriteria.Criteria1)) && (criteria.Any(o => o.ModuleName.Contains(selectedModule))))
                                {
                                    <label class="alert-danger">Criteria is already within Database</label>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (showPopUpFeedback)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add new Feedback</h3>
                            @*Button that closes the modal and resets any error messages displayed*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">
                            @*Displays selected module*@
                            <label>Module:</label>
                            <label>@selectedModule </label>
                            <br />
                            @*Displays selected acw*@
                            <label>ACW:</label>
                            <label>@selectedACW </label>
                            <br />
                            @if (selectedSection1Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection1 </label>
                                <br />
                                @*Displays selected criteria*@
                                <label>Criteria:</label>
                                <label>@selectedCriteria1 </label>
                            }
                            else if (selectedSection2Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection2 </label>
                                <br />
                                @*Displays selected criteria*@
                                <label>Criteria:</label>
                                <label>@selectedCriteria2 </label>
                            }
                            else if (selectedSection3Bool)
                            {
                                <label>Section:</label>
                                <label>@selectedSection3 </label>
                                <br />
                                @*Displays selected criteria*@
                                <label>Criteria:</label>
                                <label>@selectedCriteria3 </label>
                            }
                            <br />
                            @*Input box to allow for adding feedback*@
                            <h8>Insert Feedback</h8>
                            <input class="form-control" type="text" placeholder="Feedback" @bind="inputFeedback.Feedback1" />
                            <br />
                            <h8>Insert Feedback</h8>
                            <input class="form-control" type="number" placeholder="Grade" @bind="inputFeedback.Grade" />
                            <br />
                            @*When the user has entered the appropiate details, and presses save, the saveFeedback method will run*@
                            <button type="button" class="btn btn-success" @onclick="SaveFeedback"> Save </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @*When the button above is clicked, this modal (pop up) box will appear, allowing the user to input a new module*@
        @if (confirmationPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            @*Modal title *@
                            <h3 class="modal-title">Confirm Deletion</h3>
                            @*Button that closes the modal and resets any error messages displayed*@
                            <button type="button" class="close" @onclick="ClosePopup"><span aria-hidden="true">X</span></button>
                        </div>
                        <div class="modal-body">

                            <label>Confirmation: This will delete</label>
                            @if (selectedModulebool)
                            {
                                <label>@selectedModule</label>
                            }
                            else if (selectedACWbool)
                            {
                                <label>@selectedACW</label>
                            }
                            else if (@selectedSection1Bool)
                            {
                                <label>@selectedSection1</label>
                            }
                            else if (@selectedSection2Bool)
                            {
                                <label>@selectedSection2</label>
                            }
                            else if (@selectedSection3Bool)
                            {
                                <label>@selectedSection3</label>
                            }
                            else if (@selectedCriteria1bool)
                            {
                                <label>@selectedCriteria1</label>
                            }
                            else if (@selectedCriteria2bool)
                            {
                                <label>@selectedCriteria2</label>
                            }
                            else if (@selectedCriteria3bool)
                            {
                                <label>@selectedCriteria3</label>
                            }
                            <br />
                            @*When the user has entered the appropiate details, and presses save, the saveACW method will run*@
                            <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion"> Delete </button>
                            <br />
                            <br />

                            @if (errorModule == true)
                            {
                                <label class="alert-danger">No Module Chosen </label>
                            }
                            else if (errorAcw == true)
                            {
                                <label class="alert-danger">No ACW Chosen </label>
                            }
                            else if (errorSections)
                            {
                                <label class="alert-danger">No Section Chosen </label>
                            }
                            else if (errorCriteria)
                            {
                                <label class="alert-danger">No Criteria Chosen </label>
                            }
                            else if (errorFeedback)
                            {
                                <label class="alert-danger">No Feedback Chosen </label>
                            }




                        </div>
                    </div>
                </div>
            </div>
        }

        <button type="button" class="btn btn-primary" @onclick="DownloadFile">Export to Text Document</button>
        <br />
        <br />



        @if (errorStudentNumber)
        {
            <label class="alert-danger">No Student Number Entered</label>
        }

        @if (@resetNumber < 1000)
        {
            LoadValues();
        }



    </form>
</body>



@code {

    // Gets the user who is logged in
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string UserIdentityName = "";

    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    // Creates the lists pulled from the database tables
    List<Modules> moduleList;
    List<Feedback> feedback;
    List<Feedback> unsortedFeedback;
    List<Criteria> criteria;
    List<Sections> sections;
    List<Acw> acw;

    // The variables that will be edited when the user interactes with the dropdown boxes
    string studentNumber, selectedModule, selectedACW;
    bool selectedModulebool, selectedACWbool;

    string selectedSection1, selectedSection2, selectedSection3;
    bool selectedSection1Bool, selectedSection2Bool, selectedSection3Bool = false;

    string selectedCriteria1, selectedCriteria2, selectedCriteria3;
    bool selectedCriteria1bool, selectedCriteria2bool, selectedCriteria3bool = false;

    string selectedFeedback1, selectedFeedback2, selectedFeedback3;
    bool selectedFeedback1bool, selectedFeedback2bool, selectedFeedback3bool = false;

    // The variables that prevent overwriting of the selected variables
    bool presentModule, presentACW, presentSection, presentCriteria, presentFeedback;

    // The variables used for when displaying the modals
    bool ShowPopUpModule, ShowPopUpACW, ShowPopUpSection, ShowPopUpCriteria, showPopUpFeedback, confirmationPopup = false;

    // The variables that show new sections
    bool showNewSection = false;
    int sectionCounter = 1;

    // The variables that allow for new data to be added to the databases
    Modules inputModules = new Modules();
    Acw inputACW = new Acw();
    Sections inputSections = new Sections();
    Criteria inputCriteria = new Criteria();
    Feedback inputFeedback = new Feedback();

    // The variables that check for errors
    bool errorModule, errorAcw, errorSections, errorCriteria, errorFeedback, errorStudentNumber = false;

    int resetNumber = 0;

    // Is run when the page loads and populates the lists with all data from the database that is appropiate for the user logged in
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }
        moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
        unsortedFeedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
        sections = await SectionService.GetSectionsAsync(user.Identity.Name);
        acw = await ACWService.GetAcwsAsync(user.Identity.Name);

        feedback = unsortedFeedback.OrderByDescending(o => o.Grade).ToList();
    }

    void ShowNewSection()
    {
        showNewSection = true;
        sectionCounter++;
    }

    // Will run when the user closes the modal
    void ClosePopup()
    {
        // Close the Popup
        ShowPopUpModule = false;
        ShowPopUpACW = false;
        showPopUpFeedback = false;
        ShowPopUpSection = false;
        ShowPopUpCriteria = false;
        confirmationPopup = false;

        // Resets error messages
        errorModule = false;
        errorAcw = false;
        errorSections = false;
        errorCriteria = false;
        errorFeedback = false;

        selectedModulebool = false;
        selectedACWbool = false;

        selectedSection1Bool = false;
        selectedSection2Bool = false;
        selectedSection3Bool = false;

        selectedCriteria1bool = false;
        selectedCriteria2bool = false;
        selectedCriteria3bool = false;

        selectedFeedback1bool = false;
        selectedFeedback2bool = false;
        selectedFeedback3bool = false;

    }

    void SetModuleBoolTrue()
    {
        selectedModulebool = true;
    }

    void SetACWBoolTrue()
    {
        selectedACWbool = true;
    }

    void SetSection1BoolTrue()
    {
        selectedSection1Bool = true;
    }

    void SetSection2BoolTrue()
    {
        selectedSection2Bool = true;
    }

    void SetSection3BoolTrue()
    {
        selectedSection3Bool = true;
    }

    void SetCriteria1BoolTrue()
    {
        selectedCriteria1bool = true;

    }

    void SetCriteria2BoolTrue()
    {
        selectedCriteria2bool = true;

    }

    void SetCriteria3BoolTrue()
    {
        selectedCriteria3bool = true;

    }

    void SetFeedback1BoolTrue()
    {
        selectedFeedback1bool = true;
    }

    void SetFeedback2BoolTrue()
    {
        selectedFeedback2bool = true;

    }
    void SetFeedback3BoolTrue()
    {
        selectedFeedback3bool = true;
    }


    // When the user presses the button to add a module, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewModule()
    {
        inputModules = new Modules();
        inputModules.Id = 0;
        ShowPopUpModule = true;
    }

    // When the user presses the button to add an acw, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewACW()
    {
        inputACW = new Acw();
        inputACW.Id = 0;
        ShowPopUpACW = true;
    }

    void AddNewSection()
    {
        inputSections = new Sections();
        inputSections.Id = 0;
        ShowPopUpSection = true;
    }

    void AddNewCriteria()
    {
        inputCriteria = new Criteria();
        inputCriteria.Id = 0;
        ShowPopUpCriteria = true;
    }

    // When the user presses the button to add feedback, the code below creates the variables needed for the saveModule method and then displays the modal
    void AddNewFeedback()
    {
        inputFeedback = new Feedback();
        inputACW.Id = 0;
        showPopUpFeedback = true;
    }


    void DeletePopUp()
    {
        confirmationPopup = true;
    }


    // When the user presses save in the module modal, the following code will run
    async Task SaveModule()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputModules.ModuleName == null || inputModules.ModuleName == "")
        {
            errorModule = true;
        }
        // if the user has enetered something that already exsists in the database and presses save, the error will display
        else if (moduleList.Any(o => o.ModuleName.Contains(inputModules.ModuleName)))
        {
            errorModule = true;
        }

        // if there are no errors, the following code will run
        if (errorModule == false)
        {
            // Close the Popup
            ShowPopUpModule = false;
            // ID has been set to 0 so that the primary key knows to continue within the database
            if (inputModules.Id == 0)
            {
                // Creates the new module
                Modules NewModule = new Modules();
                // Assigns the data inputted to the newModule corresponding columns
                NewModule.ModuleName = inputModules.ModuleName;
                NewModule.UserName = UserIdentityName;
                // Passes the new module to be created in the module service
                var result = ModuleService.CreateModulesAsync(NewModule);

                var user = (await authenticationStateTask).User;
                moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
                ClosePopup();
                return;
            }
        }
        else
        {
            return;
        }
    }

    // When the user presses save in the acw modal, the following code will run
    async Task SaveACW()
    {
        // if the user has not selected a module and presses save, the error will display
        @if (selectedModule == "No Module Chosen")
        {
            errorModule = true;
        }

        // if the user has not entered anything and presses save, the error will display
        if (inputACW.AcwName == null || inputACW.AcwName == "")
        {
            errorAcw = true;
        }

        foreach (var acwrecord in acw)
        {
            if (acwrecord.AcwName.Contains(inputACW.AcwName) && acwrecord.ModuleName.Contains(selectedModule))
            {
                errorAcw = true;
            }
        }

        // if there are no errors, the following code will run
        if (errorAcw == false && errorModule == false && errorSections == false && errorCriteria == false)
        {

            // Close the Popup
            ShowPopUpACW = false;
            // Creates the new acw
            Acw newACW = new Acw();
            newACW.ModuleName = selectedModule;
            newACW.AcwName = inputACW.AcwName;
            newACW.UserName = UserIdentityName;
            // Passes the new acw to be created in the acw service
            var acwInsert = ACWService.CreateACWAsync(newACW);
            var user = (await authenticationStateTask).User;
            acw = await ACWService.GetAcwsAsync(user.Identity.Name);
            ClosePopup();
            return;

        }
    }

    async Task SaveSections()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputSections.SectionName == null || inputSections.SectionName == "")
        {
            errorSections = true;
        }

        if (selectedACW == "No ACW Chosen" || selectedModule == "No Module Chosen")
        {
            errorSections = true;
        }


        if (errorSections == false)
        {
            // Close the Popup
            ShowPopUpSection = false;

            // Creates the new section
            Sections newSection = new Sections();
            newSection.Id = 0;
            newSection.SectionName = inputSections.SectionName;
            newSection.ModuleName = selectedModule;
            newSection.Acwname = selectedACW;
            newSection.UserName = UserIdentityName;
            // Passes the new section to be created in the section service
            var sectionInsert = SectionService.CreateSectionsAsync(newSection);
            var user = (await authenticationStateTask).User;
            sections = await SectionService.GetSectionsAsync(user.Identity.Name);
            ClosePopup();
            return;
        }

    }

    async Task SaveCriteria()
    {
        // if the user has not entered anything and presses save, the error will display
        if (inputCriteria.Criteria1 == null || inputCriteria.Criteria1 == "")
        {
            errorCriteria = true;
        }

        if (selectedACW == "No ACW Chosen")
        {
            errorCriteria = true;
        }

        if ((selectedSection1 == "No Section Chosen" && selectedSection1Bool) || (selectedSection2 == "No Section Chosen" && selectedSection2Bool) || (selectedSection3 == "No Section Chosen" && selectedSection3Bool))
        {
            errorCriteria = true;
        }

        if (errorCriteria == false)
        {
            // Close the Popup
            ShowPopUpCriteria = false;

            // Creates the new criteria
            Criteria newCriteria = new Criteria();
            newCriteria.Id = 0;
            newCriteria.Criteria1 = inputCriteria.Criteria1;
            if (selectedSection1Bool)
            {
                newCriteria.SectionName = selectedSection1;
            }
            else if (selectedSection2Bool)
            {
                newCriteria.SectionName = selectedSection2;
            }
            else if (selectedSection3Bool)
            {
                newCriteria.SectionName = selectedSection3;
            }

            newCriteria.Acwname = selectedACW;
            newCriteria.ModuleName = selectedModule;
            newCriteria.UserName = UserIdentityName;
            // Passes the new criteria to be created in the criteria service
            var criteriaInsert = CriteriaService.CreateCriteriaAsync(newCriteria);
            var user = (await authenticationStateTask).User;
            criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
            ClosePopup();
            return;
        }
    }



    // When the user presses save in the feedback modal, the following code will run
    async Task SaveFeedback()
    {
        // Close the Popup
        showPopUpFeedback = false;
        // Creates the new feedback
        Feedback newFeedback = new Feedback();
        newFeedback.Feedback1 = inputFeedback.Feedback1;
        newFeedback.Grade = inputFeedback.Grade;
        newFeedback.ModuleName = selectedModule;
        newFeedback.Acwname = selectedACW;
        if (selectedSection1Bool)
        {
            newFeedback.SectionName = selectedSection1;
        }
        else if (selectedSection2Bool)
        {
            newFeedback.SectionName = selectedSection2;
        }
        else if (selectedSection3Bool)
        {
            newFeedback.SectionName = selectedSection3;
        }

        if (selectedSection1Bool)
        {
            newFeedback.Criteria = selectedCriteria1;
        }
        else if (selectedSection2Bool)
        {
            newFeedback.Criteria = selectedCriteria2;
        }
        else if (selectedSection3Bool)
        {
            newFeedback.Criteria = selectedCriteria3;
        }
        newFeedback.UserName = UserIdentityName;

        // Passes the new feedback to be created in the criteria service
        var feedbackInsert = FeedbackService.CreateFeedbackAsync(newFeedback);
        var user = (await authenticationStateTask).User;
        feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
        ClosePopup();
        return;
    }


    async Task ConfirmDeletion()
    {

        var user = (await authenticationStateTask).User;

        if ((selectedModulebool && selectedModule == null) || (selectedModulebool && selectedModule == "No Module Chosen"))
        {
            errorModule = true;
        }
        if ((selectedACWbool && selectedACW == null) || (selectedACWbool && selectedACW == "No ACW Chosen"))
        {
            errorAcw = true;
        }
        if ((selectedSection1Bool && selectedSection1 == null) || (selectedSection1Bool && selectedSection1 == "No Section Chosen") || (selectedSection2Bool && selectedSection2 == null) || (selectedSection2Bool && selectedSection2 == "No Section Chosen") || (selectedSection3Bool && selectedSection3 == null) || (selectedSection3Bool && selectedSection3 == "No Section Chosen"))
        {
            errorSections = true;
        }
        if ((selectedCriteria1bool && selectedCriteria1 == null) || (selectedCriteria1bool && selectedCriteria1 == "No Criteria Chosen") || (selectedCriteria2bool && selectedCriteria2 == null) || (selectedCriteria2bool && selectedCriteria2 == "No Criteria Chosen") || (selectedCriteria3bool && selectedCriteria3 == null) || (selectedCriteria3bool && selectedCriteria3 == "No Criteria Chosen"))
        {
            errorCriteria = true;
        }
        if ((selectedFeedback1bool && selectedFeedback1 == null) || (selectedFeedback1bool && selectedFeedback1 == "No Feedback Chosen") || (selectedFeedback2bool && selectedFeedback2 == null) || (selectedFeedback2bool && selectedFeedback2 == "No Feedback Chosen") || (selectedFeedback3bool && selectedFeedback3 == null) || (selectedFeedback3bool && selectedFeedback3 == "No Feedback Chosen"))
        {
            errorFeedback = true;
        }


        if (!errorModule && !errorAcw && !errorSections && !errorCriteria)
        {
            confirmationPopup = false;
            if (selectedModulebool)
            {
                foreach (var module in moduleList)
                {
                    if (module.ModuleName == selectedModule)
                    {
                        var moduleDelete = ModuleService.DeleteModulesAsync(module);
                    }
                }
                moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
            }
            else if (selectedACWbool)
            {
                foreach (var acoursework in acw)
                {
                    if (acoursework.AcwName == selectedACW)
                    {
                        var acwDelete = ACWService.DeleteACWAsync(acoursework);
                    }
                }
                acw = await ACWService.GetAcwsAsync(user.Identity.Name);

            }
            else if (selectedSection1Bool || selectedSection2Bool || selectedSection3Bool)
            {
                foreach (var section in sections)
                {
                    if (section.SectionName == selectedSection1 || section.SectionName == selectedSection2 || section.SectionName == selectedSection3)
                    {
                        var sectionDelete = SectionService.DeleteSectionsAsync(section);
                    }
                }
                sections = await SectionService.GetSectionsAsync(user.Identity.Name);
            }
            else if (selectedCriteria1bool || selectedCriteria2bool || selectedCriteria3bool)
            {
                foreach (var criterion in criteria)
                {
                    if (criterion.Criteria1 == selectedCriteria1 || criterion.Criteria1 == selectedCriteria2 || criterion.Criteria1 == selectedCriteria3)
                    {
                        var criteriaDelete = CriteriaService.DeleteCriteriaAsync(criterion);
                    }
                }
                criteria = await CriteriaService.GetCriteriasAsync(user.Identity.Name);
            }
            else if (selectedFeedback1bool || selectedFeedback2bool || selectedFeedback3bool)
            {
                foreach (var feedback in feedback)

                    if (feedback.Feedback1 == selectedFeedback1 || feedback.Feedback1 == selectedFeedback2 || feedback.Feedback1 == selectedFeedback3)
                    {
                        var criteriaDelete = FeedbackService.DeleteFeedbackAsync(feedback);
                    }
                feedback = await FeedbackService.GetFeedbacksAsync(user.Identity.Name);
            }
            ClosePopup();
            return;
        }
    }


    async Task DownloadFile()
    {
        if (studentNumber == null || studentNumber == "")
        {
            errorStudentNumber = true;
        }
        else
        {
            errorStudentNumber = false;
            var buffer = new MemoryStream();
            var writer = new BinaryWriter(buffer);

            writer.Write("Student Number: " + studentNumber + "\r\n");
            writer.Write("Module: " + selectedModule + "\r\n");
            writer.Write("ACW: " + selectedACW + "\r\n");
            writer.Write("\r\n");


            writer.Write("Section 1" + "\r\n");
            writer.Write("Section: " + selectedSection1 + "\r\n");
            writer.Write("Criteria: " + selectedCriteria1 + "\r\n");
            writer.Write("Feedback: " + selectedFeedback1 + "\r\n");
            writer.Write("\r\n");

            if (sectionCounter == 2)
            {
                writer.Write("Section 2" + "\r\n");
                writer.Write("Section: " + selectedSection2 + "\r\n");
                writer.Write("Criteria: " + selectedCriteria2 + "\r\n");
                writer.Write("Feedback: " + selectedFeedback2 + "\r\n");
                writer.Write("\r\n");
            }
            if (sectionCounter == 3)
            {
                writer.Write("Section 3" + "\r\n");
                writer.Write("Section: " + selectedSection3 + "\r\n");
                writer.Write("Criteria: " + selectedCriteria3 + "\r\n");
                writer.Write("Feedback: " + selectedFeedback3 + "\r\n");

            }
            writer.Close();
            byte[] bytes = buffer.ToArray();
            var task = await BlazorDownloadFileService.DownloadFile(studentNumber, bytes, "text/plain");
        }
    }

    void LoadValues()
    {
        resetNumber++;
    }

}
