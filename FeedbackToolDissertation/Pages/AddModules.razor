@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@inject ModuleService ModuleService
@page "/AddFeedback"

<h3>Add Modules</h3>

         <p>
            <!-- Add a new forecast -->
            <button class="btn btn-success"
                    @onclick="AddNewModule">
                    Add New Forecast
                </button>
            </p>

  @if(ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Forecast</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <input class="form-control" type="text"
                                placeholder="Module Name"
                               @bind="objModules.ModuleName" />






                                <!-- Button to save the forecast -->
                                <br />
                                <button type="button" class="btn btn-success"
                                @onclick="SaveModule">
                                    Save
                                </button>&nbsp;
                             </div>
                        </div>
                    </div>
                </div> 
}


@code 
{

        [CascadingParameter]

        Task<AuthenticationState> authenticationStateTask { get; set; }

        List<Modules> moduleList;
        private string UserIdentityName = "";
        Modules objModules = new Modules();
        bool ShowPopup = false;


    protected override async Task OnInitializedAsync()
    {

        // Get the current user
        var user = (await authenticationStateTask).User;
        if (user.Identity != null)
        {
            UserIdentityName = user.Identity.Name ?? "";
        }
    }


    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewModule()
    {
        // Make new forecast
        objModules = new Modules();
        // Set Id to 0 so we know it is a new record
        objModules.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }



    async Task SaveModule()
    {
        // Close the Popup
        ShowPopup = false;
        // A new forecast will have the Id set to 0
        if (objModules.Id == 0)
        {
            // Create new forecast
            Modules objNewModules = new Modules();
            objNewModules.ModuleName = objModules.ModuleName;
            objNewModules.UserName = UserIdentityName;
            var result = ModuleService.CreateModulesAsync(objNewModules);
        }

    }


}
