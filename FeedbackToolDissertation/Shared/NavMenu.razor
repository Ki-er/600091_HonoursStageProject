@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@inject ModuleService ModuleService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">DbFeedback</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
       </ul>

    @if (moduleList == null)
    {
        <p><em>Loading....</em></p>
    }
    else
    {
        <ul class="nav flex-column">
            @foreach (var mn in moduleList)
            {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@mn.PageName" @onclick="ToggleNavMenu">
                            <span class="@mn.IconName" aria-hidden="true"></span>@mn.ModuleName
                        </NavLink>
                    </li>
                }
            }
        </ul>
    }
</div>

	@code {
            private bool collapseNavMenu = true;

  private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;

    }



  // AuthenticationState is available as a CascadingParameter
  [CascadingParameter]

   Task < AuthenticationState > authenticationStateTask {get; set; }

  List <Modules> moduleList;

  protected
  override
  async Task OnInitializedAsync()
  {

    // Get the current user
    var user = (await authenticationStateTask).User;
    moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
  }




}

