@using FeedbackToolDissertation.Data
@using FeedbackToolDissertation.Data.FeedbackToolDissertation
@inject ModuleService ModuleService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">FeeDBack</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>


<AuthorizeView>
<Authorized>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/Grading" Match="NavLinkMatch.All">
                <span class="oi oi-pencil" aria-hidden="true"></span> Grading
            </NavLink>
        </li>

         <li class="nav-item px-3">
         <NavLink class="nav-link" @onclick="()=>expandSubNav = !expandSubNav">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Add and Delete
        </NavLink>
         </li>
         @if (expandSubNav)
    {
        <NavLink class="expand-menu" href="">  
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/LogOut" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> Add Feedback
            </NavLink>
        </li>        </NavLink>
<li class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/LogOut" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> Add Modules
            </NavLink>
        </li>



    

    }





        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/LogOut" Match="NavLinkMatch.All">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
            </NavLink>
        </li>
</Authorized>
<!-- Show this section if the user is not logged in -->
<NotAuthorized>
            <li class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/Login" Match="NavLinkMatch.All">
                <span class="oi oi-account-login" aria-hidden="true"></span> Log In
            </NavLink>
        </li>
                    <li class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/Register" Match="NavLinkMatch.All">
                <span class="oi oi-account-login" aria-hidden="true"></span> Register
            </NavLink>
        </li>
</NotAuthorized>
</AuthorizeView>

</ul>
</div>

}

    
@*
        @if (moduleList == null)
    {
        <p><em>Loading....</em></p>
    }
    else
    {
        <ul class="nav flex-column">
            @foreach (var mn in moduleList)
            {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@mn.PageName" @onclick="ToggleNavMenu">
                            <span class="@mn.IconName" aria-hidden="true"></span>@mn.ModuleName
                        </NavLink>
                    </li>
                }
            }
        </ul>
    }
*@



	@code {
    private bool collapseNavMenu;
    private bool expandSubNav;


  private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;

    }



  // AuthenticationState is available as a CascadingParameter
  [CascadingParameter]

   Task < AuthenticationState > authenticationStateTask {get; set; }

  List <Modules> moduleList;

  protected
  override
  async Task OnInitializedAsync()
  {

    // Get the current user
    var user = (await authenticationStateTask).User;
    moduleList = await ModuleService.GetModulesAsync(user.Identity.Name);
  }

}

